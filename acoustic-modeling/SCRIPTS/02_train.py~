#!/usr/bin/python

#!/usr/bin/python
import os
import sys
import imp

##############
## Preparation
##
##
##############

try:
    module_name = os.path.basename(sys.argv[1]).split('.')[0]
    cfg = imp.load_source(module_name, sys.argv[1])
except ImportError:
    print "%s cannot be loaded" % (sys.argv[1])

try:
    networkToolPath = os.getcwd() + os.path.sep + 'utilities' + os.path.sep + 'networkTool'
    networkTool = imp.load_source('netCreate', networkToolPath + os.path.sep + 'netCreate.py')
except ImportError:
    print "Cannot found utilities/networkTool/netCreate"


def prepareCURRENNT(modelDir):
    """ Generating config.cfg in the model directory
    """
    try:
        os.mkdir(modelDir)
    except OSError:
        pass


    ## modify the network file
    network = modelDir + os.path.sep + cfg.nnModelNetname
    if cfg.mdnConfig:
        mdnConfigPath = modelDir + os.path.sep + cfg.nnMDNConfigName
    else:
        mdnConfigPath = None
    networkTool.modifyNetworkFile(cfg.network, sum(cfg.inputDim), sum(cfg.outputDim),
                                  cfg.mdnConfig, network, mdnConfigPath)


    ## find the necessary input/output data
    dataDir    = cfg.nnDataDirName
    trainNcDir = dataDir + os.path.sep + cfg.trainSet
    valNcDir   = dataDir + os.path.sep + cfg.valSet
    linkDataDir= dataDir + os.path.sep + cfg.linkDirname
    
    trainFileList = [trainNcDir + os.path.sep + fileName for fileName in os.listdir(trainNcDir) if fileName.startswith(cfg.nnDataNcPreFix)]
    valFileList   = [valNcDir + os.path.sep + fileName for fileName in os.listdir(valNcDir) if fileName.startswith(cfg.nnDataNcPreFix)]

    inputDirs     = ','.join([linkDataDir for x in range(len(cfg.inputDim))])
    inputDims     = '_'.join([str(x) for x in cfg.inputDim])
    inputExts     = ','.join(['.' +x for x in cfg.inputExt])

    outputDirs    = ','.join([linkDataDir for x in range(len(cfg.outputDim))])
    outputDims    = '_'.join([str(x) for x in cfg.outputDim])
    outputExts    = ','.join(['.' +x for x in cfg.outputExt])

    inputMV       = dataDir + os.path.sep + cfg.computMeanStdOn + os.path.sep +  cfg.nnDataInputMV
    outputMV      = dataDir + os.path.sep + cfg.computMeanStdOn + os.path.sep +  cfg.nnDataOutputMV

    
    ## create the config.cfg for CURRENNT
    config = modelDir + os.path.sep  + cfg.nnModelCfgname
    cfg.self_system('cp %s %s' % (cfg.trainCfg, config))

    filePtr = open(config, 'a')
    if trainFileList:
        filePtr.write('train_file = %s\n' % (','.join(trainFileList)))
    if valFileList:
        filePtr.write('val_file = %s\n' % (','.join(valFileList)))
    filePtr.write('ExtInputDirs = %s \n' % (inputDirs))
    filePtr.write('ExtInputExts = %s \n' % (inputExts))
    filePtr.write('ExtInputDims = %s \n' % (inputDims))
    filePtr.write('ExtOutputDirs = %s \n' % (outputDirs))
    filePtr.write('ExtOutputExts = %s \n' % (outputExts))
    filePtr.write('ExtOutputDims = %s \n' % (outputDims))
    filePtr.write('target_data_ms = %s \n' % (outputMV))
    filePtr.write('source_data_ms = %s \n' % (inputMV))
    if mdnConfigPath is not None:
        filePtr.write('mdn_config = %s \n' % (mdnConfigPath))
        filePtr.write('tieVariance = false \n')
    if cfg.initialModel is not None:
        assert os.path.isfile(cfg.initialModel), "Cannot find %s" % (cfg.initialModel)
        filePtr.write('trainedModel = %s \n' % (cfg.initialModel))
        if cfg.initialModelWhichLayers is not None:
            filePtr.write('trainedModelCtr = %s \n' % (cfg.initialModelWhichLayers))
    if hasattr(cfg, 'sarOrder'):
        assert hasattr(cfg, 'sarConfig'), "Fail to found sarConfig"
        filePtr.write('AROrder = %s \n' % ('_',join([str(int(x)) in cfg.sarOrder])))
        filePtr.write('ARConfig = %s \n' % ('_',join([str(int(x)) in cfg.sarConfig])))
        filePtr.write('wInitPara = 20 \n')
        filePtr.write('varInitPara = 0.001 \n')
        
    filePtr.close()


if __name__ == '__main__':

    if cfg.step02:
        display.self_print_with_date('Step2. network training', 'h')
        
        try:
            os.mkdir(cfg.nnModelDirName)
        except OSError:
            pass

        modelDir = cfg.nnModelDirName + os.path.sep + cfg.modelName
        if cfg.step02train_CFG:
            prepareCURRENNT(modelDir)

        if cfg.step02train_TRAIN:
            os.chdir(modelDir)
            os.system("cat ./%s" % (cfg.nnModelCfgname))
            runCmd = '%s --options_file %s --verbose 1 > log_train 2>log_err' % (cfg.path_currennt,
                                                                                 cfg.nnModelCfgname)
            cfg.self_system(runCmd)
    else:
        display.self_print_with_date('skip step2(network training)', 'h')

